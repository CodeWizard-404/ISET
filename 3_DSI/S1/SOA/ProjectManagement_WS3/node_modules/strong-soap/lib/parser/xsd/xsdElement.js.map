{"version":3,"file":"xsdElement.js","names":["Element","require","helper","descriptor","XSDElement","constructor","nsName","attrs","options","describeChildren","definitions","children","length","TypeDescriptor","isMany","childDescriptor","i","child","describe","add","postProcess","$maxOccurs","Number","targetNamespace","namespaces","xsd","allowedChildren","ElementDescriptor","AttributeDescriptor","module","exports"],"sources":["../../../src/parser/xsd/xsdElement.js"],"sourcesContent":["// Copyright IBM Corp. 2016,2018. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar Element = require('../element');\nvar helper = require('../helper');\nvar descriptor = require('./descriptor');\n\nclass XSDElement extends Element {\n  constructor(nsName, attrs, options) {\n    super(nsName, attrs, options);\n  }\n\n  describeChildren(definitions, descriptor) {\n    var children = this.children || [];\n    if (children.length === 0) return descriptor;\n    descriptor = descriptor || new XSDElement.TypeDescriptor();\n\n    var isMany = this.isMany();\n    var childDescriptor;\n    for (var i = 0, child; child = children[i]; i++) {\n      childDescriptor = child.describe(definitions);\n      if (childDescriptor) {\n        descriptor.add(childDescriptor, isMany);\n      }\n    }\n    return descriptor;\n  }\n\n  describe(definitions) {\n    return this.describeChildren(definitions);\n  }\n\n  postProcess(definitions) {\n    // NO-OP\n  }\n\n  /**\n   * Check if the max occurrence is many\n   * @returns {boolean}\n   */\n  isMany() {\n    if (this.$maxOccurs === 'unbounded') return true;\n    return Number(this.$maxOccurs) > 1;\n  }\n}\n\nXSDElement.targetNamespace = Element.namespaces.xsd;\nXSDElement.allowedChildren = ['annotation'];\n\n// Descriptors\nXSDElement.ElementDescriptor = descriptor.ElementDescriptor;\nXSDElement.AttributeDescriptor = descriptor.AttributeDescriptor;\nXSDElement.TypeDescriptor = descriptor.TypeDescriptor;\n\nmodule.exports = XSDElement;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC;AACnC,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC;AAExC,MAAMG,UAAU,SAASJ,OAAO,CAAC;EAC/BK,WAAWA,CAACC,MAAM,EAAEC,KAAK,EAAEC,OAAO,EAAE;IAClC,KAAK,CAACF,MAAM,EAAEC,KAAK,EAAEC,OAAO,CAAC;EAC/B;EAEAC,gBAAgBA,CAACC,WAAW,EAAEP,UAAU,EAAE;IACxC,IAAIQ,QAAQ,GAAG,IAAI,CAACA,QAAQ,IAAI,EAAE;IAClC,IAAIA,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE,OAAOT,UAAU;IAC5CA,UAAU,GAAGA,UAAU,IAAI,IAAIC,UAAU,CAACS,cAAc,CAAC,CAAC;IAE1D,IAAIC,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;IAC1B,IAAIC,eAAe;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,KAAK,EAAEA,KAAK,GAAGN,QAAQ,CAACK,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC/CD,eAAe,GAAGE,KAAK,CAACC,QAAQ,CAACR,WAAW,CAAC;MAC7C,IAAIK,eAAe,EAAE;QACnBZ,UAAU,CAACgB,GAAG,CAACJ,eAAe,EAAED,MAAM,CAAC;MACzC;IACF;IACA,OAAOX,UAAU;EACnB;EAEAe,QAAQA,CAACR,WAAW,EAAE;IACpB,OAAO,IAAI,CAACD,gBAAgB,CAACC,WAAW,CAAC;EAC3C;EAEAU,WAAWA,CAACV,WAAW,EAAE;IACvB;EAAA;;EAGF;AACF;AACA;AACA;EACEI,MAAMA,CAAA,EAAG;IACP,IAAI,IAAI,CAACO,UAAU,KAAK,WAAW,EAAE,OAAO,IAAI;IAChD,OAAOC,MAAM,CAAC,IAAI,CAACD,UAAU,CAAC,GAAG,CAAC;EACpC;AACF;AAEAjB,UAAU,CAACmB,eAAe,GAAGvB,OAAO,CAACwB,UAAU,CAACC,GAAG;AACnDrB,UAAU,CAACsB,eAAe,GAAG,CAAC,YAAY,CAAC;;AAE3C;AACAtB,UAAU,CAACuB,iBAAiB,GAAGxB,UAAU,CAACwB,iBAAiB;AAC3DvB,UAAU,CAACwB,mBAAmB,GAAGzB,UAAU,CAACyB,mBAAmB;AAC/DxB,UAAU,CAACS,cAAc,GAAGV,UAAU,CAACU,cAAc;AAErDgB,MAAM,CAACC,OAAO,GAAG1B,UAAU","ignoreList":[]}