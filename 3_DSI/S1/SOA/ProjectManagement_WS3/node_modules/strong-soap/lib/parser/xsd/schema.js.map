{"version":3,"file":"schema.js","names":["_","require","assert","XSDElement","helper","Set","Schema","constructor","nsName","attrs","options","complexTypes","simpleTypes","elements","includes","groups","attributes","attributeGroups","merge","source","isInclude","$targetNamespace","undefined","xmlns","Array","isArray","uniq","concat","addChild","child","name","$name","getTargetNamespace","namespaces","xsd","schemaTypes","location","$schemaLocation","$location","push","namespace","$namespace","type","postProcess","defintions","visited","add","children","forEach","c","visitDfs","nodes","node","has","_processed","elementName","allowedChildren","module","exports"],"sources":["../../../src/parser/xsd/schema.js"],"sourcesContent":["// Copyright IBM Corp. 2016,2018. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar _ = require('lodash');\nvar assert = require('assert');\nvar XSDElement = require('./xsdElement');\nvar helper = require('./../helper');\nvar Set = helper.Set;\n\nclass Schema extends XSDElement {\n  constructor(nsName, attrs, options) {\n    super(nsName, attrs, options);\n    this.complexTypes = {}; // complex types\n    this.simpleTypes = {}; // simple types\n    this.elements = {}; // elements\n    this.includes = []; // included or imported schemas\n    this.groups = {};\n    this.attributes = {};\n    this.attributeGroups = {};\n  }\n\n  merge(source, isInclude) {\n    if (source === this) return this;\n    assert(source instanceof Schema);\n    if (this.$targetNamespace === source.$targetNamespace ||\n      // xsd:include allows the target schema that does not have targetNamespace\n      (isInclude && source.$targetNamespace === undefined)) {\n      _.merge(this.complexTypes, source.complexTypes);\n      _.merge(this.simpleTypes, source.simpleTypes);\n      _.merge(this.elements, source.elements);\n      _.merge(this.groups, source.groups);\n      _.merge(this.attributes, source.attributes);\n      _.merge(this.attributeGroups, source.attributeGroups);\n      _.merge(this.xmlns, source.xmlns);\n      if (Array.isArray(source.includes)) {\n        this.includes = _.uniq(this.includes.concat(source.includes));\n      }\n    }\n    return this;\n  }\n\n  addChild(child) {\n    var name = child.$name;\n    if (child.getTargetNamespace() === helper.namespaces.xsd &&\n      name in helper.schemaTypes)\n      return;\n    switch (child.name) {\n      case 'include':\n      case 'import':\n        var location = child.$schemaLocation || child.$location;\n        if (location) {\n          this.includes.push({\n            namespace: child.$namespace || child.$targetNamespace\n            || this.$targetNamespace,\n            location: location,\n            type: child.name // include or import\n          });\n        }\n        break;\n      case 'complexType':\n        this.complexTypes[name] = child;\n        break;\n      case 'simpleType':\n        this.simpleTypes[name] = child;\n        break;\n      case 'element':\n        this.elements[name] = child;\n        break;\n      case 'group':\n        this.groups[name] = child;\n        break;\n      case 'attribute':\n        this.attributes[name] = child;\n        break;\n      case 'attributeGroup':\n        this.attributeGroups[name] = child;\n        break;\n    }\n  }\n\n  postProcess(defintions) {\n    var visited = new Set();\n    visited.add(this);\n    this.children.forEach(function(c) {\n      visitDfs(defintions, visited, c);\n    });\n  }\n}\n\nfunction visitDfs(defintions, nodes, node) {\n  let visited = nodes.has(node);\n  if (!visited && !node._processed) {\n    node.postProcess(defintions);\n    node._processed = true;\n\n    node.children.forEach(function(child) {\n      visitDfs(defintions, nodes, child);\n    });\n  }\n}\n\nSchema.elementName = 'schema';\nSchema.allowedChildren = ['annotation', 'element', 'complexType', 'simpleType',\n  'include', 'import', 'group', 'attribute', 'attributeGroup'];\n\nmodule.exports = Schema;\n"],"mappings":"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","ignoreList":[]}